name: TestPipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'  # 指定要安装的 Go 版本为 1.24

      - name: Cache Go modules
        id: cache-go-modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Update Go dependencies
        run: |
          export GOPROXY=https://goproxy.cn,direct
          go get -u

      - name: Build Go application
        run: go build -p 2 -ldflags "-w -s" -trimpath -gcflags "all=-l" -o main

      - name: Check for existing Docker container
        run: |
          # 检查名为mygo的容器是否正在运行
          if docker ps --filter name=mygo --format "{{.Names}}" | grep -q mygo; then
            # 如果容器正在运行，则停止并移除它
            docker stop mygo
            docker rm mygo
          fi

      - name: Check for existing Docker image
        run: |
          # 检查名为mygo的镜像是否存在
          if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "mygo:latest"; then
            # 如果镜像存在，则移除它
            docker rmi mygo:latest
          fi

      - name: Build Docker image
        run: |
          # 使用 Dockerfile 构建镜像，并指定镜像名称为mygo
          docker build -t mygo:latest .

      - name: Run Docker container
        run: |
          # 启动新镜像的容器，指定容器名称为mygo，使用 --network host 模式并后台运行
          docker run -d --network host --name mygo mygo:latest